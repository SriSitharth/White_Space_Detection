import cv2
import numpy as np
from PIL import Image

img = cv2.imread('Images/paint1.jpg')
imgContour = img.copy()
cv2.imshow('Original', img)

def getContours(img, cThr=[100, 100]):
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray, (5, 5), 1)
    imgCanny = cv2.Canny(imgBlur, cThr[0], cThr[1])
    contours, heirarchy = cv2.findContours(
    imgCanny, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    print(heirarchy,'heirarchy')
    #print(contours,'contour')

    # Convert the image to the HSV color space
    hsv_image = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    # Define lower and upper bounds for non-white colors in HSV
    lower_white = np.array([0, 0, 100])   # Minimum HSV values for non-white
    upper_white = np.array([255, 30, 255])  # Maximum HSV values for non-white

    # Create a mask to isolate the non-white areas
    mask = cv2.inRange(hsv_image, lower_white, upper_white)

    for cnt in contours:
        area = cv2.contourArea(cnt)
        print(area,'area')
        if area > 0:
            #cv2.drawContours(imgContour, cnt, -1, (255, 0, 0), 3)
            #peri = cv2.arcLength(cnt, True)
            #approx = cv2.approxPolyDP(cnt, 0.02*peri, True)

            x, y, w, h = cv2.boundingRect(cnt)
            print(x, y, w, h)
            cv2.rectangle(imgContour, (x, y), (x+w, y+h), (0, 255, 0), 2)

            #i=x-40
            #j=y-35
            #cv2.rectangle(imgContour, (i, j),(i+25,j+20), (255, 255, 0), 2)
            #cv2.line(imgContour, (i+25, j+20),(x,y), (255, 255, 0),2)
            #cv2.putText(imgContour, '0', (i,j), cv2.FONT_HERSHEY_COMPLEX,2, (0, 255, 255), 2)

            for d in range(1, 100):
              # Search in all directions
              for dx, dy in [(-d, 0), (d, 0), (0, -d), (0, d)]:
                  if mask[y + dy, x + dx] == 255:  # Check if it's white space
                     x_annot, y_annot = x + dx, y + dy
                     break
              else:
                   continue  # Continue searching if not found
              break  # Break out of the outer loop if found
            cv2.rectangle(imgContour, (x_annot, y_annot), (x_annot + 50, y_annot + 40), (255, 0, 0), 2)

    cv2.imshow('Output', imgContour)

getContours(img)

cv2.waitKey(0)


# svImage = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
# lowerLimit, upperLimit = get_limits(color=yellow)
# ret, thresh = cv2.threshold(hsvImage, 127, 255, 0)
# contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
# frame = cv2.drawContours(img, contours, -1, (0,255,0), 3)
# sensitivity = 50
# lower_white = np.array([0,0,255-sensitivity])
# upper_white = np.array([255,sensitivity,255])
# mask = cv2.inRange(hsvImage, lower_white, upper_white )
# mask = cv2.inRange(hsvImage, lowerLimit, upperLimit )
# mask_ = Image.fromarray(mask)
# bbox = mask_.getbbox()
# if bbox is not None:
#    x1,y1,x2,y2 = bbox
#    frame = cv2.rectangle(img, (x1,y1), (x2,y2), (0,255,0), 5)
# print(bbox)
#    cv2.imshow('Segmented Output',frame)
#    cv2.waitKey(1)
